@page "/register"
@using BudgetPlanner.Cache
@using BudgetPlanner.Interfaces
@using BudgetPlanner.Manager
@using BudgetPlanner.Model
@using Microsoft.AspNetCore.Components

@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="card shadow p-4 mx-auto" style="max-width: 400px;">
        <h2 class="text-center">Willkommen!</h2>
        <p class="text-center">Erstelle jetzt ein Konto und starte durch.</p>

        <div class="mb-3">
            <label class="form-label">Name</label>
            <input type="text" class="form-control" @bind="_user.Name" placeholder="Dein Name" />
        </div>

        <div class="mb-3">
            <label class="form-label">E-Mail-Adresse</label>
            <input type="email" class="form-control" @bind="_user.Email" placeholder="E-Mail eingeben" />
        </div>

        <div class="mb-3">
            <label class="form-label">Passwort</label>
            <input type="password" class="form-control" @bind="_user.Password" placeholder="Passwort erstellen" />
        </div>

        <div class="mb-3">
            <label class="form-label">Passwort wiederholen</label>
            <input type="password" class="form-control" @bind="_user.Password2" placeholder="Passwort wiederholen" />
        </div>

        <button class="btn custom-btn w-100" @onclick="RegisterUser">Registrieren</button>

        <p class="mt-3 text-center text-success">@_message</p>

        <p class="mt-3 text-center">
            Hast du schon ein Konto? <a href="/">Jetzt anmelden</a>
        </p>
    </div>
</div>

@code {
    private UserUi _user = new();
    private string _message = string.Empty;

    private readonly IUserManager _userManager;

    public Register(IUserManager userManager)
    {
        _userManager = userManager;
    }

    protected override async void OnInitialized()
    {
        if (UserCache.UserId > 0)
        {
            bool Logoff = await Application.Current.MainPage.DisplayAlert(
                title: "Nicht möglich",
                message: "Du musst dich abmelden um auf der Seite fortzufahren. Möchtest du dich abmelden?",
                accept: "Ja",
                cancel: "Nein");

            if (Logoff)
                await _userManager.LogoffUser();
            else
                Navigation.NavigateTo("/home");
        }
    }

    private async void RegisterUser()
    {
        if (string.IsNullOrWhiteSpace(_user.Name)
            || string.IsNullOrWhiteSpace(_user.Email)
            || string.IsNullOrWhiteSpace(_user.Password)
            || string.IsNullOrWhiteSpace(_user.Password2))
        {
            _message = "Bitte fülle alle Felder aus!";
            return;
        }

        if (string.IsNullOrWhiteSpace(_user.Password)
            || string.IsNullOrWhiteSpace(_user.Password2)
            || _user.Password != _user.Password2)
        {
            _message = "Das Passwort muss übereinstimmen!";
            return;
        }

        bool nameAvailable = await _userManager.UsernameAvailableAsync(_user.Name);
        if (!nameAvailable)
        {
            _message = "Der Name ist bereits vergeben";
            return;
        }

        bool succesful = await _userManager.RegisterUserAsync(new User()
            {
                Name = _user.Name,
                Email = _user.Email,
                Password = _user.Password
            });

        if (succesful)
        {
            _message = "Registrierung erfolgreich! 🎉";
            await _userManager.LogInUserAsync(_user.Name, _user.Password);
            // Swith to Home-Page
            Navigation.NavigateTo("/home");
        }
        else
            _message = "Es ist ein Fehler bei der Registrierung aufgetreten.";
    }

    private class UserUi
    {
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string Password2 { get; set; } = string.Empty;
    }
}